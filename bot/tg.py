import asyncio
import aiohttp
import re
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = "7390929840:AAH81vk7XvWz6C-AGT5DJTEm4O0IYLL3jVM"
BASE_URL = "http://138.124.52.134:8080/ai/razvorot/"
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === STATES ===
class Form(StatesGroup):
    Step1_Name = State()
    Step1_Quality = State()
    Step1_Action = State()
    Step1_Reaction = State()
    Retry_Step1_Name = State()
    Retry_Step1_Quality = State()
    Retry_Step1_Action = State()
    Retry_Step1_Reaction = State()
    Step2_Quality = State()
    Step2_Action = State()
    Retry_Step2_Quality = State()
    Retry_Step2_Action = State()
    Step3_Acceptance = State()
    Step3_Thank = State()
    Retry_Step3_Acceptance = State()
    Retry_Step3_Thank = State()

# === HELPERS ===
def extract_failed_fields(response: str) -> list[int]:
    return [int(num) for num in re.findall(r"<(\d+)>", response)]

async def send_data_to_server(page_number: int, data: dict) -> str:
    url = f"{BASE_URL}{page_number}"
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as response:
            if response.status == 200:
                result = await response.json()
                return result.get("result", "")
            return await response.text()

# === START ===
@dp.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    intro_1 = (
        "¬´–†–∞–∑–≤–æ—Ä–æ—Ç¬ª ‚Äì —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç:\n\n"
        "‚Äî –°–Ω–∏–∂–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤ (–æ–±–∏–¥—ã, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –≥–Ω–µ–≤)\n"
        "‚Äî –ò–∑–±–µ–≥–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö ¬´—è–º¬ª\n"
        "‚Äî –ü–µ—Ä–µ–π—Ç–∏ –æ—Ç –æ–±–≤–∏–Ω–µ–Ω–∏—è –∫ —Å–∞–º–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é\n"
        "‚Äî –î–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø—É—Å–∫–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n\n"
        "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø: —Ç–æ, —á—Ç–æ –Ω–∞—Å –∑–∞–¥–µ–≤–∞–µ—Ç –≤ –¥—Ä—É–≥–∏—Ö ‚Äî –æ—Ç—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å —Å–∞–º–∏—Ö."
    )
    await message.answer(intro_1)
    await asyncio.sleep(5)
    intro_2 = (
        "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥—ë–º –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ:\n\n"
        """–í–æ–∑—å–º–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –∫–æ–Ω–∏—Ä–µ—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º (–∏–ª–∏ —Å–æ–±–æ–π, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é\n–û—Å–æ–∑–Ω–∞–π—Ç–µ —Å–≤–æ—é –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é: —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –≥–Ω–µ–≤, –æ–±–∏–¥–∞, –ø–µ—á–∞–ª—å –∏ —Ç.–ª.\n–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É: –ß–µ–ª–æ–≤–µ–∫ (–µ–≥–æ –∏–º—è) –±—ã–ª (–µ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ) –∏ –¥–µ–ª–∞–ª (–¥–µ–π—Å—Ç–≤–∏–µ). –ò —ç—Ç–æ –º–µ–Ω—è (–∑–ª–∏—Ç, –æ–±–∏–∂–∞–µ—Ç, —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –∏ —Ç.–ø.)"""
        "üîπ *–ö–∞–∫ –∑–æ–≤—É—Ç —á–µ–ª–æ–≤–µ–∫–∞, –æ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–π–¥—ë—Ç —Ä–µ—á—å?*"
    )
    await state.clear()
    await state.set_state(Form.Step1_Name)
    await message.answer(intro_2, parse_mode="Markdown")

# === STEP 1 ===
@dp.message(Form.Step1_Name)
async def step1_name(message: Message, state: FSMContext):
    await state.update_data(who=message.text.strip())
    await message.answer("üîπ *–ö–∞–∫–æ–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ –≤ –Ω—ë–º?*", parse_mode="Markdown")
    await state.set_state(Form.Step1_Quality)

@dp.message(Form.Step1_Quality)
async def step1_quality(message: Message, state: FSMContext):
    await state.update_data(quality=message.text.strip())
    await message.answer("üîπ *–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è?*", parse_mode="Markdown")
    await state.set_state(Form.Step1_Action)

@dp.message(Form.Step1_Action)
async def step1_action(message: Message, state: FSMContext):
    await state.update_data(what_was_he_doing=message.text.strip())
    await message.answer("üîπ *–ö–∞–∫–∞—è —É –≤–∞—Å –±—ã–ª–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —ç—Ç–æ?*", parse_mode="Markdown")
    await state.set_state(Form.Step1_Reaction)
async def check_step1_all_and_send(message: Message, state: FSMContext):
    data = await state.get_data()
    required_fields = ["who", "quality", "what_was_he_doing", "reaction"]

    if all(data.get(k) for k in required_fields):
        payload = {
            "who": data["who"],
            "quality": data["quality"],
            "what_was_he_doing": data["what_was_he_doing"],
            "reaction": data["reaction"],
            "id": str(message.from_user.id)
        }
        response = await send_data_to_server(1, payload)
        failed = extract_failed_fields(response)

        if not failed:
            await message.answer(
                "‚úÖ *–®–∞–≥ 1 –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n"
                f"‚Äî –ò–º—è: *{payload['who']}*\n"
                f"‚Äî –ö–∞—á–µ—Å—Ç–≤–æ: *{payload['quality']}*\n"
                f"‚Äî –î–µ–π—Å—Ç–≤–∏–µ: *{payload['what_was_he_doing']}*\n"
                f"‚Äî –í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è: *{payload['reaction']}*",
                parse_mode="Markdown"
            )
            await state.set_state(Form.Step2_Quality)
            await message.answer("üîπ *–ö–∞–∫–æ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤ —Å–µ–±–µ?*", parse_mode="Markdown")
        else:
            await message.answer(f"‚õî –û—à–∏–±–∫–∞:\n{response.strip()}", parse_mode="Markdown")
            if 1 in failed:
                await state.set_state(Form.Retry_Step1_Name)
                await message.answer("üîÅ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:")
            elif 2 in failed:
                await state.set_state(Form.Retry_Step1_Quality)
                await message.answer("üîÅ –í–≤–µ–¥–∏—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ:")
            elif 3 in failed:
                await state.set_state(Form.Retry_Step1_Action)
                await message.answer("üîÅ –ß—Ç–æ –¥–µ–ª–∞–ª —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫?")
            elif 4 in failed:
                await state.set_state(Form.Retry_Step1_Reaction)
                await message.answer("üîÅ –ö–∞–∫–∞—è —É –≤–∞—Å –±—ã–ª–∞ —Ä–µ–∞–∫—Ü–∏—è?")

@dp.message(Form.Step1_Reaction)
async def step1_reaction(message: Message, state: FSMContext):
    await state.update_data(reaction=message.text.strip())
    user_data = await state.get_data()
    payload = {
        "who": user_data.get("who"),
        "quality": user_data.get("quality"),
        "what_was_he_doing": user_data.get("what_was_he_doing"),
        "reaction": user_data.get("reaction"),
        "id": str(message.from_user.id)
    }
    response = await send_data_to_server(1, payload)
    failed = extract_failed_fields(response)
    if not failed:
        await message.answer(
            "‚úÖ *–®–∞–≥ 1 –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n"
            f"‚Äî –ò–º—è: *{payload['who']}*\n"
            f"‚Äî –ö–∞—á–µ—Å—Ç–≤–æ: *{payload['quality']}*\n"
            f"‚Äî –î–µ–π—Å—Ç–≤–∏–µ: *{payload['what_was_he_doing']}*\n"
            f"‚Äî –í–∞—à–∞ —Ä–µ–∞–∫—Ü–∏—è: *{payload['reaction']}*",
            parse_mode="Markdown"
        )
        await state.set_state(Form.Step2_Quality)
        await message.answer("""–ü—Ä–∏–∑–Ω–∞–π—Ç–µ —Å–≤–æ–µ –Ω–µ—ç—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∑–∏–ª –≤–∞–º —á–µ–ª–æ–≤–µ–∫. –í—ã –Ω–∞–∂–µ—Ç–µ –±—ã—Ç—å —Ç–∞–∫–∏–º –∂–µ (–ø—Ä–∞–º–æ–µ –∑–µ—Ä–∫–∞–ª–æ) –∏–ª–∏ –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ (–æ–±—Ä–∞—Ç–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ), –Ω–æ —Ç–æ–∂–µ –Ω–µ—ç—Ñ–µ–∫—Ç–∏–≤–Ω–æ\n–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –Ω–æ–≤—ã–º ¬´–ø–∞—Ç—Ç–µ—Ä–Ω–æ–º¬ª –ø–æ–≤–µ–¥–µ–Ω–∏—è.\n–ó–∞–ø–∏—à–∏—Ç–µ —Ñ–æ—Ä–º—É–ª—É: –Ø –≤—Å–µ–≥–¥–∞(–Ω–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ) –∏ –¥–µ–ª–∞—é (–¥–µ–π—Å—Ç–≤–∏–µ). –ò –º–µ–Ω—è —ç—Ç–æ —Ä–∞–¥—É–µ—Ç.\nüîπ *–ö–∞–∫–æ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤ —Å–µ–±–µ?*""" , parse_mode="Markdown")
    else:
        await message.answer(f"‚õî –û—à–∏–±–∫–∞:\n{response.strip()}", parse_mode="Markdown")
        if 1 in failed:
            await state.set_state(Form.Retry_Step1_Name)
            await message.answer("üîÅ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–Ω–æ–≤–æ:")
        elif 2 in failed:
            await state.set_state(Form.Retry_Step1_Quality)
            await message.answer("üîÅ –í–≤–µ–¥–∏—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ:")
        elif 3 in failed:
            await state.set_state(Form.Retry_Step1_Action)
            await message.answer("üîÅ –ß—Ç–æ –¥–µ–ª–∞–ª —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫?")
        elif 4 in failed:
            await state.set_state(Form.Retry_Step1_Reaction)
            await message.answer("üîÅ –ö–∞–∫–∞—è —É –≤–∞—Å –±—ã–ª–∞ —Ä–µ–∞–∫—Ü–∏—è?")

@dp.message(Form.Retry_Step1_Name)
async def retry_step1_name(message: Message, state: FSMContext):
    await state.update_data(who=message.text.strip())
    await check_step1_all_and_send(message, state)

@dp.message(Form.Retry_Step1_Quality)
async def retry_step1_quality(message: Message, state: FSMContext):
    await state.update_data(quality=message.text.strip())
    await check_step1_all_and_send(message, state)

@dp.message(Form.Retry_Step1_Action)
async def retry_step1_action(message: Message, state: FSMContext):
    await state.update_data(what_was_he_doing=message.text.strip())
    await check_step1_all_and_send(message, state)

@dp.message(Form.Retry_Step1_Reaction)
async def retry_step1_reaction(message: Message, state: FSMContext):
    await state.update_data(reaction=message.text.strip())
    await check_step1_all_and_send(message, state)
# === STEP 2 ===
@dp.message(Form.Step2_Quality)
async def step2_quality(message: Message, state: FSMContext):
    await state.update_data(new_quality=message.text.strip())
    await message.answer("üîπ *–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤–∞—à–∏–º –Ω–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º?*", parse_mode="Markdown")
    await state.set_state(Form.Step2_Action)

@dp.message(Form.Step2_Action)
async def step2_action(message: Message, state: FSMContext):
    await state.update_data(new_action=message.text.strip())
    user_data = await state.get_data()
    payload = {
        "scenery": user_data.get("new_quality"),
        "positive_reaction": user_data.get("new_action"),
        "id": str(message.from_user.id)
    }
    response = await send_data_to_server(2, payload)
    failed = extract_failed_fields(response)
    if not failed:
        await state.set_state(Form.Step3_Acceptance)
        await message.answer(f"""‚úÖ *–®–∞–≥ 2 –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n –í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω:\n‚Äî *{user_data['new_quality']}*, *{user_data['new_action']}*\n–ü—Ä–∏–º–∏—Ç–µ —Å–≤–æ–±–æ–¥—É –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±—ã—Ç—å —Ç–∞–∫–∏–º, –∫–∞–∫–æ–π –æ–Ω –µ—Å—Ç—å, –∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å —Ç–∞–∫, –∫–∞–∫ –æ–Ω —Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º.\n–ò—Å–∫—Ä–µ–Ω–Ω–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ —á–µ–ª–µ–≤–µ–∫–∞ –∑–∞ —Ç–æ, —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤—ã —É–≤–∏–¥–µ–ª–∏, –Ω–∞–¥ —á–µ–º –≤–∞–º –º–æ–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:\n–î–æ—Ä–æ–≥–æ–π(–ò–º—è)! –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–≤–æ—é —Å–≤–æ–±–æ–¥—É –≤—ã–±–æ—Ä–∞ –±—ã—Ç—å (–∫–∞—á–µ—Å—Ç–≤–æ) –∏ –¥–µ–ª–∞—Ç—å (–¥–µ–π—Å—Ç–≤–∏–µ). –Ø –±–ª–∞–≥–æ–¥–∞—Ä—é —Ç–µ–±—è –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–Ω–µ —É–ª—É—á—à–∏—Ç—å —Å–µ–±—è –∏ —Å—Ç–∞—Ç—å (–∫–∞—á–µ—Å—Ç–≤–æ)\n–ù–∞–ø–∏—à–∏—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫—É –∑–∞ —É—Ä–æ–∫,–∞ –ø–æ—Ç–æ–º –ø—Ä–æ—á—Ç–∏—Ç–µ —ç—Ç–æ –≤—Å–ª—É—Ö.üîπ *–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏–µ*""", parse_mode="Markdown")
    else:
        await message.answer(f"‚õî –û—à–∏–±–∫–∞:\n{response.strip()}", parse_mode="Markdown")
        if 1 in failed:
            await state.set_state(Form.Retry_Step2_Quality)
            await message.answer("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:")
        elif 2 in failed:
            await state.set_state(Form.Retry_Step2_Action)
            await message.answer("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

@dp.message(Form.Retry_Step2_Quality)
async def retry_step2_quality(message: Message, state: FSMContext):
    await state.update_data(new_quality=message.text.strip())
    await step2_action(message, state)

@dp.message(Form.Retry_Step2_Action)
async def retry_step2_action(message: Message, state: FSMContext):
    await state.update_data(new_action=message.text.strip())
    await step2_action(message, state)

# === STEP 3 ===
@dp.message(Form.Step3_Acceptance)
async def step3_acceptance(message: Message, state: FSMContext):
    await state.update_data(acceptance=message.text.strip())
    await message.answer("üîπ *–ó–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é?*", parse_mode="Markdown")
    await state.set_state(Form.Step3_Thank)

@dp.message(Form.Step3_Thank)
async def step3_thank(message: Message, state: FSMContext):
    await state.update_data(thank=message.text.strip())
    user_data = await state.get_data()
    payload = {
        "acceptance": user_data.get("acceptance"),
        "thank": user_data.get("thank"),
        "id": str(message.from_user.id)
    }
    response = await send_data_to_server(3, payload)
    failed = extract_failed_fields(response)
    if not failed:
        await message.answer("üéØ *–†–∞–∑–≤–æ—Ä–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n"
            f"üìÑ *–®–∞–≥ 1:*\n{user_data['who']} ‚Äî {user_data['quality']}, {user_data['what_was_he_doing']} ‚û°Ô∏è {user_data['reaction']}\n\n"
            f"üìÑ *–®–∞–≥ 2:*\n–Ø –≤—Å–µ–≥–¥–∞ {user_data['new_quality']} –∏ {user_data['new_action']}\n\n"
            f"üìÑ *–®–∞–≥ 3:*\n–ü—Ä–∏–Ω—è—Ç–∏–µ: {user_data['acceptance']}\n–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: {user_data['thank']}",
            parse_mode="Markdown")
        await state.clear()
    else:
        await message.answer(f"‚õî –û—à–∏–±–∫–∞:\n{response.strip()}", parse_mode="Markdown")
        if 1 in failed:
            await state.set_state(Form.Retry_Step3_Acceptance)
            await message.answer("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ:")
        elif 2 in failed:
            await state.set_state(Form.Retry_Step3_Thank)
            await message.answer("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:")

@dp.message(Form.Retry_Step3_Acceptance)
async def retry_step3_acceptance(message: Message, state: FSMContext):
    await state.update_data(acceptance=message.text.strip())
    await step3_thank(message, state)

@dp.message(Form.Retry_Step3_Thank)
async def retry_step3_thank(message: Message, state: FSMContext):
    await state.update_data(thank=message.text.strip())
    await step3_thank(message, state)

# === RUN ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
