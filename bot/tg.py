import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = "7026161854:AAFTuDlQ7ialeLyfSmrYejwcYCA52-BqhP4"
ADMIN_ID = 847867090  # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BASE_URL = "http://localhost:8080/ai/razvorot"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    GetName = State()
    ChooseTrial = State()
    Step1_Name = State()
    Step1_Quality = State()
    Step1_Action = State()
    Step1_Reaction = State()
    Step2_Quality = State()
    Step2_Action = State()
    Step3_Acceptance = State()
    Step3_Thank = State()
    AfterTrial = State()

# === –ö–Ω–æ–ø–∫–∏ ===
choose_trial_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÅ –ü—Ä–æ–π—Ç–∏ ¬´–†–∞–∑–≤–æ—Ä–æ—Ç¬ª")],
        [KeyboardButton(text="‚ú® –í–∞—Ä–∏–∞–Ω—Ç 2")]
    ],
    resize_keyboard=True
)

after_completion_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∏ –•–æ—á—É –∫—É–ø–∏—Ç—å –µ—â—ë –∫–ª—é—á–∏")],
        [KeyboardButton(text="‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")]
    ],
    resize_keyboard=True
)

# === –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ ===
async def check_field(endpoint: str, payload: dict) -> str:
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{BASE_URL}{endpoint}", json=payload) as response:
            result = await response.json()
            return result.get("result", "")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(F.text == "/start")
async def welcome(message: Message, state: FSMContext):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫!")
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.clear()
    await state.set_state(Form.GetName)

@dp.message(Form.GetName)
async def get_name(message: Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(client_name=name)
    await state.set_state(Form.ChooseTrial)
    await message.answer(
        f"{name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–±–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:",
        reply_markup=choose_trial_keyboard
    )

@dp.message(Form.ChooseTrial)
async def choose_trial(message: Message, state: FSMContext):
    if "—Ä–∞–∑–≤–æ—Ä–æ—Ç" in message.text.lower():
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏)
        intro = (
            "¬´–†–∞–∑–≤–æ—Ä–æ—Ç¬ª ‚Äì —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç:\n\n"
            "‚Äî –°–Ω–∏–∂–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤ (–æ–±–∏–¥—ã, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –≥–Ω–µ–≤)\n"
            "‚Äî –ò–∑–±–µ–≥–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö ¬´—è–º¬ª\n"
            "‚Äî –ü–µ—Ä–µ–π—Ç–∏ –æ—Ç –æ–±–≤–∏–Ω–µ–Ω–∏—è –∫ —Å–∞–º–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é\n"
            "‚Äî –î–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è –∏–ª–∏ –æ—Ç–ø—É—Å–∫–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n\n"
            "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–Ω—Ü–∏–ø: —Ç–æ, —á—Ç–æ –Ω–∞—Å –∑–∞–¥–µ–≤–∞–µ—Ç –≤ –¥—Ä—É–≥–∏—Ö ‚Äî –æ—Ç—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å —Å–∞–º–∏—Ö."
        )
        await message.answer(intro, parse_mode="Markdown")
        await asyncio.sleep(3)
        intro = (
            """–í–æ–∑—å–º–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º (–∏–ª–∏ —Å–æ–±–æ–π, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é
–û—Å–æ–∑–Ω–∞–π—Ç–µ —Å–≤–æ—é –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é —ç–º–æ—Ü–∏—é –Ω–∞ —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é: —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –≥–Ω–µ–≤, –æ–±–∏–¥–∞, –ø–µ—á–∞–ª—å –∏ —Ç.–ø.
–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª—É: –ß–µ–ª–æ–≤–µ–∫ (–µ–≥–æ –∏–º—è) –±—ã–ª (–µ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ) –∏ –¥–µ–ª–∞–ª (–¥–µ–π—Å—Ç–≤–∏–µ). –ò —ç—Ç–æ –º–µ–Ω—è (–∑–ª–∏—Ç, –æ–±–∏–∂–∞–µ—Ç, —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç –∏ —Ç.–ø.)"""
        )
        await message.answer(intro, parse_mode="Markdown")
        await asyncio.sleep(3)
        question = "üîπ *–ö–∞–∫ –∑–æ–≤—É—Ç —á–µ–ª–æ–≤–µ–∫–∞, –æ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–π–¥—ë—Ç —Ä–µ—á—å?*"
        await message.answer(question, parse_mode="Markdown")

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(Form.Step1_Name)
    elif "–≤–∞—Ä–∏–∞–Ω—Ç 2" in message.text.lower():
        await message.answer("‚ú® –í–∞—Ä–∏–∞–Ω—Ç 2 –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å!", reply_markup=after_completion_keyboard)
        await state.set_state(Form.AfterTrial)
    else:
        await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π.")

# === –®–∞–≥ 1 ===
@dp.message(Form.Step1_Name)
async def step1_name(message: Message, state: FSMContext):
    name = message.text.strip()
    payload = {"id": str(message.from_user.id), "who": name}
    result = await check_field("/1/who", payload)
    if "–î–∞" in result:
        await state.update_data(who=name)
        await state.set_state(Form.Step1_Quality)
        await message.answer("üîπ *–ö–∞–∫–æ–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ –≤ –Ω—ë–º?*", parse_mode="Markdown")
    else:
        await message.answer(f"‚õî {result}\nüîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(Form.Step1_Quality)
async def step1_quality(message: Message, state: FSMContext):
    quality = message.text.strip()
    payload = {"id": str(message.from_user.id), "quality": quality}
    result = await check_field("/1/quality", payload)
    if "–î–∞" in result:
        await state.update_data(quality=quality)
        await state.set_state(Form.Step1_Action)
        await message.answer("üîπ *–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è?*", parse_mode="Markdown")
    else:
        await message.answer(f"‚õî {result}\nüîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(Form.Step1_Action)
async def step1_action(message: Message, state: FSMContext):
    action = message.text.strip()
    payload = {"id": str(message.from_user.id), "what_was_he_doing": action}
    result = await check_field("/1/action", payload)
    if "–î–∞" in result:
        await state.update_data(what_was_he_doing=action)
        await state.set_state(Form.Step1_Reaction)
        await message.answer("üîπ *–ö–∞–∫–∞—è —É –≤–∞—Å –±—ã–ª–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —ç—Ç–æ?*", parse_mode="Markdown")
    else:
        await message.answer(f"‚õî {result}\nüîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(Form.Step1_Reaction)
async def step1_reaction(message: Message, state: FSMContext):
    reaction = message.text.strip()
    payload = {"id": str(message.from_user.id), "reaction": reaction}
    result = await check_field("/1/reaction", payload)
    if "–î–∞" in result:
        await state.update_data(reaction=reaction)
        data = await state.get_data()
        await message.answer(
            f"‚úÖ *–®–∞–≥ 1 –∑–∞–≤–µ—Ä—à—ë–Ω! {data['who']}, {data['quality']} –∏ {data['what_was_he_doing']}, {data['reaction']}*\n\n",
            parse_mode="Markdown"
        )
        await state.set_state(Form.Step2_Quality)
        await message.answer("""–ü—Ä–∏–∑–Ω–∞–π—Ç–µ —Å–≤–æ–µ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∑–∏–ª –≤–∞–º —á–µ–ª–æ–≤–µ–∫. 
–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Ç–∞–∫–∏–º –∂–µ (–ø—Ä—è–º–æ–µ –∑–µ—Ä–∫–∞–ª–æ) –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º (–æ–±—Ä–∞—Ç–Ω–æ–µ –∑–µ—Ä–∫–∞–ª–æ). 
–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ—ë –Ω–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ–π—Å—Ç–≤–∏–µ. 
–§–æ—Ä–º—É–ª–∞: –Ø –≤—Å–µ–≥–¥–∞ (–∫–∞—á–µ—Å—Ç–≤–æ) –∏ (–¥–µ–π—Å—Ç–≤–∏–µ). –ú–µ–Ω—è —ç—Ç–æ —Ä–∞–¥—É–µ—Ç.

üîπ *–ö–∞–∫–æ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤ —Å–µ–±–µ?*""", parse_mode="Markdown")
    else:
        await message.answer(f"‚õî {result}\nüîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

# === –®–∞–≥ 2 ===
@dp.message(Form.Step2_Quality)
async def step2_quality(message: Message, state: FSMContext):
    quality = message.text.strip()
    payload = {"id": str(message.from_user.id), "scenery": quality}
    result = await check_field("/2/scenery", payload)
    if "–î–∞" in result:
        await state.update_data(new_quality=quality)
        await state.set_state(Form.Step2_Action)
        await message.answer("üîπ *–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤–∞—à–∏–º –Ω–æ–≤—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º?*", parse_mode="Markdown")
    else:
        await message.answer(f"‚õî {result}\nüîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:")

@dp.message(Form.Step2_Action)
async def step2_action(message: Message, state: FSMContext):
    action = message.text.strip()
    payload = {"id": str(message.from_user.id), "positive_reaction": action}
    result = await check_field("/2/reaction", payload)
    if "–î–∞" in result:
        await state.update_data(new_action=action)
        user_data = await state.get_data()
        await message.answer(
            f"""‚úÖ *–®–∞–≥ 2 –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n –í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω:\n‚Äî *{user_data['new_quality']}*, *{user_data['new_action']}*\n
–Ø –≤—Å–µ–≥–¥–∞ *{user_data['new_quality']}* –∏ *{user_data['new_action']}*. –ò –º–µ–Ω—è —ç—Ç–æ —Ä–∞–¥—É–µ—Ç.""",
            parse_mode="Markdown"
        )
        await asyncio.sleep(3)
        await message.answer(f"""–ü—Ä–∏–º–∏—Ç–µ —Å–≤–æ–±–æ–¥—É –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –±—ã—Ç—å —Ç–∞–∫–∏–º, –∫–∞–∫–æ–π –æ–Ω –µ—Å—Ç—å, –∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å —Ç–∞–∫, –∫–∞–∫ –æ–Ω —Å—á–∏—Ç–∞—é—Ç –Ω—É–∂–Ω—ã–º.\n–ò—Å–∫—Ä–µ–Ω–Ω–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ —á–µ–ª–µ–≤–µ–∫–∞ –∑–∞ —Ç–æ, —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤—ã —É–≤–∏–¥–µ–ª–∏, –Ω–∞–¥ —á–µ–º –≤–∞–º –º–æ–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:\n–î–æ—Ä–æ–≥–æ–π(–ò–º—è)! –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–≤–æ—é —Å–≤–æ–±–æ–¥—É –≤—ã–±–æ—Ä–∞ –±—ã—Ç—å (–∫–∞—á–µ—Å—Ç–≤–æ) –∏ –¥–µ–ª–∞—Ç—å (–¥–µ–π—Å—Ç–≤–∏–µ). –Ø –±–ª–∞–≥–æ–¥–∞—Ä—é —Ç–µ–±—è –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–Ω–µ —É–ª—É—á—à–∏—Ç—å —Å–µ–±—è –∏ —Å—Ç–∞—Ç—å (–∫–∞—á–µ—Å—Ç–≤–æ)\n–ù–∞–ø–∏—à–∏—Ç–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫—É –∑–∞ —É—Ä–æ–∫,–∞ –ø–æ—Ç–æ–º –ø—Ä–æ—á—Ç–∏—Ç–µ —ç—Ç–æ –≤—Å–ª—É—Ö.""",parse_mode="Markdown")

        await asyncio.sleep(3)
        await state.set_state(Form.Step3_Acceptance)
        await message.answer("üîπ *–ß—Ç–æ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?*",parse_mode="Markdown")

    else:
        await message.answer(f"‚õî {result}\nüîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:")

# === –®–∞–≥ 3 ===
@dp.message(Form.Step3_Acceptance)
async def step3_acceptance(message: Message, state: FSMContext):
    text = message.text.strip()
    payload = {"id": str(message.from_user.id), "acceptance": text}
    result = await check_field("/3/acceptance", payload)
    if "–î–∞" in result:
        await state.update_data(acceptance=text)
        await state.set_state(Form.Step3_Thank)
        await message.answer("üîπ *–ó–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ —ç—Ç—É —Å–∏—Ç—É–∞—Ü–∏—é?*", parse_mode="Markdown")
    else:
        await message.answer(f"‚õî {result}\nüîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message(Form.Step3_Thank)
async def step3_thank(message: Message, state: FSMContext):
    text = message.text.strip()
    payload = {"id": str(message.from_user.id), "thank": text}
    result = await check_field("/3/thank", payload)
    if "–î–∞" in result:
        await state.update_data(thank=text)
        data = await state.get_data()
        await message.answer(
            "üéØ *–†–∞–∑–≤–æ—Ä–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n"
    "–í—ã –ø—Ä–æ—à–ª–∏ –≥–ª—É–±–æ–∫—É—é –ø—Ä–∞–∫—Ç–∏–∫—É —Å–∞–º–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –æ—Å–æ–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏, –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–≤–æ–±–æ–¥—É.\n\n"
    "*–í–æ—Ç –≤–∞—à –ª–∏—á–Ω—ã–π –†–∞–∑–≤–æ—Ä–æ—Ç:*\n\n"
    "üìÑ *–®–∞–≥ 1: –û—Å–æ–∑–Ω–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏*\n"
    f"–í—ã —É–∫–∞–∑–∞–ª–∏: *{data['who']}* ‚Äî *{data['quality']}*, –¥–µ–ª–∞–ª ‚Äî *{data['what_was_he_doing']}*, –∏ —ç—Ç–æ –≤—ã–∑–≤–∞–ª–æ —É –≤–∞—Å —Ä–µ–∞–∫—Ü–∏—é: *{data['reaction']}*\n\n"
    "üìÑ *–®–∞–≥ 2: –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞*\n"
    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤ —Å–µ–±–µ –∫–∞—á–µ—Å—Ç–≤–æ *{data['new_quality']}* –∏ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É ‚Äî *{data['new_action']}*\n"
    f"‚Üí _–Ø –≤—Å–µ–≥–¥–∞ {data['new_quality']} –∏ {data['new_action']}. –ò –º–µ–Ω—è —ç—Ç–æ —Ä–∞–¥—É–µ—Ç._\n\n"
    "üìÑ *–®–∞–≥ 3: –ü—Ä–∏–Ω—è—Ç–∏–µ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å*\n"
    f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é: *{data['acceptance']}*\n"
    f"–ò –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª–∏: *{data['thank']}*\n\n"
    "üå± –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—ã ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
    "–ë–ª–∞–≥–æ–¥–∞—Ä—è —á–µ—Å—Ç–Ω–æ–º—É –≤–∑–≥–ª—è–¥—É –Ω–∞ —Å–µ–±—è –≤—ã —Å–¥–µ–ª–∞–ª–∏ —à–∞–≥ –∫ –∑—Ä–µ–ª–æ—Å—Ç–∏, –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.\n\n"
    "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–æ–±–æ–π –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è ‚Äî –º—ã —Ä—è–¥–æ–º üíô",
            reply_markup=after_completion_keyboard,
            parse_mode="Markdown"
        )
        await state.set_state(Form.AfterTrial)
    else:
        await message.answer(f"‚õî {result}\nüîÅ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: upsell ===
@dp.message(Form.AfterTrial)
async def handle_upsell(message: Message, state: FSMContext):
    if "–∫—É–ø–∏—Ç—å" in message.text.lower():
        data = await state.get_data()
        client_name = data.get("client_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await bot.send_message(ADMIN_ID, f"üõç –ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –∫–ª—é—á–∏!\n–ò–º—è: {client_name}\nID: {message.from_user.id}")
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    else:
        await message.answer("üôè –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å MindKey!")
    await state.clear()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
